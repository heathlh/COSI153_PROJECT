{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction AccountingSystem() {\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    accounts = _useState2[0],\n    setAccounts = _useState2[1];\n  var handleAddAccount = function handleAddAccount() {\n    Alert.prompt(\"Add Account\", \"Enter the account name:\", function (text) {\n      var newAccount = {\n        name: text,\n        transactions: [],\n        note: ''\n      };\n      setAccounts([].concat(_toConsumableArray(accounts), [newAccount]));\n    });\n  };\n  var handleAddTransaction = function handleAddTransaction(accountIndex) {\n    var transaction = {\n      date: new Date().toLocaleDateString(),\n      amount: 0,\n      note: ''\n    };\n    var newAccounts = _toConsumableArray(accounts);\n    newAccounts[accountIndex].transactions.push(transaction);\n    setAccounts(newAccounts);\n  };\n  var calculateBalance = function calculateBalance(transactions) {\n    return transactions.reduce(function (total, transaction) {\n      return total + transaction.amount;\n    }, 0);\n  };\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Button, {\n      title: \"Add Account\",\n      onPress: handleAddAccount\n    }), _jsx(ScrollView, {\n      horizontal: true,\n      children: accounts.map(function (account, index) {\n        return _jsxs(View, {\n          style: styles.account,\n          children: [_jsxs(View, {\n            style: styles.accountHeader,\n            children: [_jsx(Text, {\n              children: account.name\n            }), _jsx(Text, {\n              children: calculateBalance(account.transactions)\n            }), _jsx(Text, {\n              children: account.note\n            }), _jsx(Button, {\n              title: \"Add Transaction\",\n              onPress: function onPress() {\n                return handleAddTransaction(index);\n              }\n            })]\n          }), account.transactions.map(function (transaction, transactionIndex) {\n            return _jsxs(View, {\n              style: styles.transaction,\n              children: [_jsx(Text, {\n                children: transaction.date\n              }), _jsx(Text, {\n                children: transaction.amount\n              }), _jsx(Text, {\n                children: transaction.note\n              })]\n            }, transactionIndex);\n          })]\n        }, index);\n      })\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingTop: 10,\n    paddingHorizontal: 10\n  },\n  account: {\n    borderWidth: 1,\n    borderColor: 'black',\n    marginRight: 20\n  },\n  accountHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 10,\n    padding: 10,\n    borderBottomWidth: 1,\n    borderBottomColor: 'black'\n  },\n  transaction: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 10,\n    padding: 10,\n    borderBottomWidth: 1,\n    borderBottomColor: 'black'\n  }\n});\nexport default AccountingSystem;","map":{"version":3,"names":["React","useState","View","Text","TextInput","Button","StyleSheet","ScrollView","Alert","jsx","_jsx","jsxs","_jsxs","AccountingSystem","_useState","_useState2","_slicedToArray","accounts","setAccounts","handleAddAccount","prompt","text","newAccount","name","transactions","note","concat","_toConsumableArray","handleAddTransaction","accountIndex","transaction","date","Date","toLocaleDateString","amount","newAccounts","push","calculateBalance","reduce","total","style","styles","container","children","title","onPress","horizontal","map","account","index","accountHeader","transactionIndex","create","flex","paddingTop","paddingHorizontal","borderWidth","borderColor","marginRight","flexDirection","justifyContent","marginBottom","padding","borderBottomWidth","borderBottomColor"],"sources":["/Users/liaohang/Desktop/COSI153/COSI153_PROJECT/AwesomeProject/components/AccountingSystem.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { View, Text, TextInput, Button, StyleSheet, ScrollView, Alert } from 'react-native';\n\nfunction AccountingSystem() {\n    const [accounts, setAccounts] = useState([]);\n\n    const handleAddAccount = () => {\n        Alert.prompt(\n            \"Add Account\",\n            \"Enter the account name:\",\n            (text) => {\n                const newAccount = {\n                    name: text,\n                    transactions: [],\n                    note: ''\n                };\n                setAccounts([...accounts, newAccount]);\n            }\n        );\n    }\n\n    const handleAddTransaction = (accountIndex) => {\n        const transaction = {\n            date: new Date().toLocaleDateString(),\n            amount: 0,\n            note: ''\n        };\n        const newAccounts = [...accounts];\n        newAccounts[accountIndex].transactions.push(transaction);\n        setAccounts(newAccounts);\n    }\n\n    const calculateBalance = (transactions) => {\n        return transactions.reduce((total, transaction) => total + transaction.amount, 0);\n    }\n\n    return (\n        <View style={styles.container}>\n            <Button title=\"Add Account\" onPress={handleAddAccount} />\n            <ScrollView horizontal>\n                {accounts.map((account, index) => (\n                    <View key={index} style={styles.account}>\n                        <View style={styles.accountHeader}>\n                            <Text>{account.name}</Text>\n                            <Text>{calculateBalance(account.transactions)}</Text>\n                            <Text>{account.note}</Text>\n                            <Button title=\"Add Transaction\" onPress={() => handleAddTransaction(index)} />\n                        </View>\n                        {account.transactions.map((transaction, transactionIndex) => (\n                            <View key={transactionIndex} style={styles.transaction}>\n                                <Text>{transaction.date}</Text>\n                                <Text>{transaction.amount}</Text>\n                                <Text>{transaction.note}</Text>\n                            </View>\n                        ))}\n                    </View>\n                ))}\n            </ScrollView>\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        paddingTop: 10,\n        paddingHorizontal: 10,\n    },\n    account: {\n        borderWidth: 1,\n        borderColor: 'black',\n        marginRight: 20,\n    },\n    accountHeader: {\n        flexDirection: 'row',\n        justifyContent: 'space-between',\n        marginBottom: 10,\n        padding: 10,\n        borderBottomWidth: 1,\n        borderBottomColor: 'black',\n    },\n    transaction: {\n        flexDirection: 'row',\n        justifyContent: 'space-between',\n        marginBottom: 10,\n        padding: 10,\n        borderBottomWidth: 1,\n        borderBottomColor: 'black',\n    },\n});\n\nexport default AccountingSystem;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}