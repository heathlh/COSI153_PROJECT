{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction AccountingSystem() {\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    accounts = _useState2[0],\n    setAccounts = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    isModalVisible = _useState4[0],\n    setIsModalVisible = _useState4[1];\n  var _useState5 = useState(''),\n    _useState6 = _slicedToArray(_useState5, 2),\n    newAccountName = _useState6[0],\n    setNewAccountName = _useState6[1];\n  var handleAddAccount = function handleAddAccount() {\n    var newAccount = {\n      name: newAccountName,\n      transactions: [],\n      note: ''\n    };\n    setAccounts([].concat(_toConsumableArray(accounts), [newAccount]));\n    setNewAccountName('');\n    setIsModalVisible(false);\n  };\n  var handleAddTransaction = function handleAddTransaction(accountIndex) {\n    var transaction = {\n      date: new Date().toLocaleDateString(),\n      amount: 0,\n      note: ''\n    };\n    var newAccounts = _toConsumableArray(accounts);\n    newAccounts[accountIndex].transactions.push(transaction);\n    setAccounts(newAccounts);\n  };\n  var calculateBalance = function calculateBalance(transactions) {\n    return transactions.reduce(function (total, transaction) {\n      return total + transaction.amount;\n    }, 0);\n  };\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Button, {\n      title: \"Add Account\",\n      onPress: function onPress() {\n        return setIsModalVisible(true);\n      }\n    }), _jsx(Modal, {\n      visible: isModalVisible,\n      animationType: \"slide\",\n      transparent: true,\n      children: _jsxs(View, {\n        style: styles.modalContainer,\n        children: [_jsx(Text, {\n          children: \"Enter the account name:\"\n        }), _jsx(TextInput, {\n          value: newAccountName,\n          onChangeText: setNewAccountName\n        }), _jsx(Button, {\n          title: \"Add Account\",\n          onPress: handleAddAccount\n        }), _jsx(Button, {\n          title: \"Cancel\",\n          onPress: function onPress() {\n            return setIsModalVisible(false);\n          }\n        })]\n      })\n    }), _jsx(ScrollView, {\n      horizontal: true,\n      children: accounts.map(function (account, index) {\n        return _jsxs(View, {\n          style: styles.account,\n          children: [_jsxs(View, {\n            style: styles.accountHeader,\n            children: [_jsx(Text, {\n              children: account.name\n            }), _jsx(Text, {\n              children: calculateBalance(account.transactions)\n            }), _jsx(Text, {\n              children: account.note\n            }), _jsx(Button, {\n              title: \"Add Transaction\",\n              onPress: function onPress() {\n                return handleAddTransaction(index);\n              }\n            })]\n          }), account.transactions.map(function (transaction, transactionIndex) {\n            return _jsxs(View, {\n              style: styles.transaction,\n              children: [_jsx(Text, {\n                children: transaction.date\n              }), _jsx(Text, {\n                children: transaction.amount\n              }), _jsx(Text, {\n                children: transaction.note\n              })]\n            }, transactionIndex);\n          })]\n        }, index);\n      })\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingTop: 10,\n    paddingHorizontal: 10\n  },\n  account: {\n    borderWidth: 1,\n    borderColor: 'black',\n    marginRight: 20,\n    marginBottom: 20,\n    padding: 10\n  },\n  accountHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 10,\n    borderBottomWidth: 1,\n    borderBottomColor: 'black'\n  },\n  transaction: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 10,\n    borderBottomWidth: 1,\n    borderBottomColor: 'black'\n  },\n  modalContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#00000099'\n  }\n});","map":{"version":3,"names":["React","useState","View","Text","TextInput","Button","StyleSheet","ScrollView","Modal","jsx","_jsx","jsxs","_jsxs","AccountingSystem","_useState","_useState2","_slicedToArray","accounts","setAccounts","_useState3","_useState4","isModalVisible","setIsModalVisible","_useState5","_useState6","newAccountName","setNewAccountName","handleAddAccount","newAccount","name","transactions","note","concat","_toConsumableArray","handleAddTransaction","accountIndex","transaction","date","Date","toLocaleDateString","amount","newAccounts","push","calculateBalance","reduce","total","style","styles","container","children","title","onPress","visible","animationType","transparent","modalContainer","value","onChangeText","horizontal","map","account","index","accountHeader","transactionIndex","create","flex","paddingTop","paddingHorizontal","borderWidth","borderColor","marginRight","marginBottom","padding","flexDirection","justifyContent","borderBottomWidth","borderBottomColor","alignItems","backgroundColor"],"sources":["/Users/liaohang/Desktop/COSI153/COSI153_PROJECT/AwesomeProject/components/AccountingSystem.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { View, Text, TextInput, Button, StyleSheet, ScrollView, Modal } from 'react-native';\n\nfunction AccountingSystem() {\n    const [accounts, setAccounts] = useState([]);\n    const [isModalVisible, setIsModalVisible] = useState(false);\n    const [newAccountName, setNewAccountName] = useState('');\n\n    const handleAddAccount = () => {\n        const newAccount = {\n            name: newAccountName,\n            transactions: [],\n            note: ''\n        };\n        setAccounts([...accounts, newAccount]);\n        setNewAccountName('');\n        setIsModalVisible(false);\n    }\n\n    const handleAddTransaction = (accountIndex) => {\n        const transaction = {\n            date: new Date().toLocaleDateString(),\n            amount: 0,\n            note: ''\n        };\n        const newAccounts = [...accounts];\n        newAccounts[accountIndex].transactions.push(transaction);\n        setAccounts(newAccounts);\n    }\n\n    const calculateBalance = (transactions) => {\n        return transactions.reduce((total, transaction) => total + transaction.amount, 0);\n    }\n\n    return (\n        <View style={styles.container}>\n            <Button title=\"Add Account\" onPress={() => setIsModalVisible(true)} />\n            <Modal visible={isModalVisible} animationType=\"slide\" transparent>\n                <View style={styles.modalContainer}>\n                    <Text>Enter the account name:</Text>\n                    <TextInput value={newAccountName} onChangeText={setNewAccountName} />\n                    <Button title=\"Add Account\" onPress={handleAddAccount} />\n                    <Button title=\"Cancel\" onPress={() => setIsModalVisible(false)} />\n                </View>\n            </Modal>\n            <ScrollView horizontal>\n                {accounts.map((account, index) => (\n                    <View key={index} style={styles.account}>\n                        <View style={styles.accountHeader}>\n                            <Text>{account.name}</Text>\n                            <Text>{calculateBalance(account.transactions)}</Text>\n                            <Text>{account.note}</Text>\n                            <Button title=\"Add Transaction\" onPress={() => handleAddTransaction(index)} />\n                        </View>\n                        {account.transactions.map((transaction, transactionIndex) => (\n                            <View key={transactionIndex} style={styles.transaction}>\n                                <Text>{transaction.date}</Text>\n                                <Text>{transaction.amount}</Text>\n                                <Text>{transaction.note}</Text>\n                            </View>\n                        ))}\n                    </View>\n                ))}\n            </ScrollView>\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        paddingTop: 10,\n        paddingHorizontal: 10,\n    },\n    account: {\n        borderWidth: 1,\n        borderColor: 'black',\n        marginRight: 20,\n        marginBottom: 20,\n        padding: 10,\n    },\n    accountHeader: {\n        flexDirection: 'row',\n        justifyContent: 'space-between',\n        marginBottom: 10,\n        borderBottomWidth: 1,\n        borderBottomColor: 'black',\n    },\n    transaction: {\n        flexDirection: 'row',\n        justifyContent: 'space-between',\n        marginBottom: 10,\n        borderBottomWidth: 1,\n        borderBottomColor: 'black',\n    },\n    modalContainer: {\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center',\n        backgroundColor: '#00000099',\n    },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}